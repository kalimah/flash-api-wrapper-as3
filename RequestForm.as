/** This class allows you to send a subscriber request to campaign monitor. Example of use below:* * NOTE: The form may have up to 13 fields. 		However, the names of the fields in flash must EXACTLY MATCH the name of the custom fields you make on campaign monitor!!! 		Make sure you have a submit button (submitBtn) as well as a message textfield (msg), 			in order to display to the user if the request was successful.		Below is an example of use:		import CMRequest;		var newsletterRequest:CMRequest;		submitBtn.addEventListener(MouseEvent.CLICK, submit);		function submit(e:MouseEvent):void {		if (email.text !== "" &&			firstName.text !== "" &&			lastName.text !== "" &&			address1.text !== "" &&			city.text !== "" &&			state.text !== "" &&			zip.text !== "" &&			phone.text !== "") {				msg.text = "Processing...";				// pass in the text field names to CMRequest()				newsletterRequest = new CMRequest("efiahdfy137856hsyeyrhkfs", "327987528klahjksdagsausdji73", 														firstName, lastName, email, 														address1, address2, city, 														state, zip, phone);				newsletterRequest.addEventListener(CMRequest.ON_FINISHED, getResponse);		} else {			msg.text = "Please fill out all fields";		}	};		function getResponse(e:Event):void {		msg.text = newsletterRequest.result;	}** Created By: Ben Vogelzang * © Soldier Design 2008** Feel free to use this code however you please. * I only ask that you keep something that references me as a source of your code. Thanks!*/package {		import flash.events.*;	import flash.net.*;		public class CMRequest extends EventDispatcher {						public static const ON_FINISHED = "OnFinished";		private static const INVALID_EMAIL = 1;				// error code for an invalid email		private static const SUCCESS = 0;					// code for successful request		private static const INVALID_API_KEY = 100;			// error code for a invalid api key		private static const INVALID_LIST_ID = 101;			// error code for a invalid list id		private var urlLoader:URLLoader;					// the loader that gets the info from campaign monitor		private var _response:String;						// the response message to show the user				/*		* @param apiID - the campaign monitor api id number		* @param listID - the campaign monitor list id number		* @param firstName - the first name text field of the participant		* @param lastName - the last name text field of the participant		* @param optionalFields - the rest of the fields that you need for campaign monitor.		* 						  NOTE: These must have the same name variable name as optional fields on campaign monitor.		*		*/		public function CMRequest(apiID, listID, firstName, lastName, email, ... optionalFields) {								var myApiId = apiID; 				var myListId = listID;								// build the soap call with appropriate content				var theSoapCall = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + 								 "<SOAP-ENV:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" + 								 "xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">" +								 "<SOAP-ENV:Body><Subscriber.AddWithCustomFields xmlns=\"http://api.createsend.com/api/\">";				theSoapCall += "<ApiKey>" + myApiId + "</ApiKey>";				theSoapCall += "<ListID>" + myListId + "</ListID>";				theSoapCall += "<Email>" + email.text + "</Email>";				theSoapCall += "<Name>" + firstName.text + " " + lastName.text + "</Name>";								// add all the custom fields to the soap call				theSoapCall += "<CustomFields>";				for (var i=0; i < optionalFields.length; i++) {					theSoapCall += "<SubscriberCustomField><Key>[" + optionalFields[i].name + "]</Key><Value>" + optionalFields[i].text + "</Value></SubscriberCustomField>"					}				theSoapCall += "</CustomFields>";				theSoapCall += "</Subscriber.AddWithCustomFields></SOAP-ENV:Body></SOAP-ENV:Envelope>";												// send off the soap call and get back the response from campaign monitor				var contactSendXML = new XML (theSoapCall);				var urlRequest:URLRequest = new URLRequest("http://api.createsend.com/api/api.asmx");				urlRequest.method = URLRequestMethod.POST;				urlRequest.requestHeaders.push(new URLRequestHeader("Content-Type","text/xml; charset=utf-8"));				urlRequest.requestHeaders.push(new URLRequestHeader("SOAPAction","http://api.createsend.com/api/Subscriber.AddWithCustomFields"));				urlRequest.data = contactSendXML;								urlLoader = new URLLoader();				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;				urlLoader.addEventListener(Event.COMPLETE, onLoaded);				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, ifFailed);				urlLoader.load(urlRequest);		}				// called when campaign monitor has responded		private function onLoaded(e:Event):void {						// set the response to whatever campaign monitor returned			var recieveXML:XML = new XML(urlLoader.data);    		if (recieveXML..*::Code == INVALID_EMAIL) {				trace(recieveXML..*::Message);				_response = "Invalid Email Address!";			}			else if (recieveXML..*::Code == SUCCESS) {				trace(recieveXML..*::Message);				_response = "Thank You!";			}			else if (recieveXML..*::Code == INVALID_API_KEY) {				trace(recieveXML..*::Message);				_response = "Invalid API Key";			}			else if (recieveXML..*::Code == INVALID_LIST_ID) {				trace(recieveXML..*::Message);				_response = "Invalid ListID";			}						dispatchEvent(new Event(ON_FINISHED));		}				// called if the request failed to send or campaign monitor did not respond		private function ifFailed(e:IOErrorEvent):void {			trace("Soap call could not be sent because " + e);		}				// accessor to get the response		public function get result():String {			return _response;		}			}}